{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["softShadows","Scene","boxRef","useRef","useFrame","current","rotation","y","x","z","Sky","distance","sunPosition","inclination","azimuth","rayleigh","mieCoefficient","mieDirectionalG","castShadow","receiveShadow","ref","position","attach","color","ContactShadows","opacity","width","height","blur","far","resolution","Math","PI","args","App","className","colorManagement","shadowMap","camera","fov","intensity","shadow-mapSize-height","shadow-mapSize-width","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAAe,I,6ECWfA,cAEA,IAAMC,EAAQ,WACZ,IAAMC,EAASC,mBAQf,OAPAC,aAAS,WACPF,EAAOG,QAAQC,SAASC,GAAK,KAC7BL,EAAOG,QAAQC,SAASE,GAAK,KAC7BN,EAAOG,QAAQC,SAASG,GAAK,QAK7B,kCACE,cAACC,EAAA,EAAD,CAGEC,SAAU,KACVC,YAAa,CAAC,EAAG,EAAG,GACpBC,YAAa,GACbC,QAAS,IAETC,SAAU,EACVC,eAAgB,EAChBC,gBAAiB,IAGnB,cAAC,IAAD,CACEC,YAAU,EACVC,eAAa,EACbC,IAAKlB,EACLmB,SAAU,CAAC,EAAG,EAAG,GAJnB,SAME,sCACEC,OAAO,WACPC,MAAM,YAIV,cAACC,EAAA,EAAD,CACEC,QAAS,EACTC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,IAAK,GACLC,WAAY,MAGd,cAAC,IAAD,CACEX,eAAa,EAEbb,SAAU,EAAEyB,KAAKC,GAAK,EAAG,EAAG,GAC5BX,SAAU,CAAC,GAAI,EAAG,GAClBY,KAAM,CAAC,IAAM,KALf,SAOE,sCACEd,eAAa,EACbG,OAAO,mBA4IFY,MA7Ef,WACE,OACE,qBAAKC,UAAU,MAAf,SAKE,qBAAKA,UAAU,WAAf,SACE,eAAC,IAAD,CACEA,UAAU,SACVC,iBAAe,EACfC,WAAS,EAETC,OAAQ,CAAEjB,SAAU,EAAE,EAAG,EAAG,GAAIkB,IAAK,IALvC,UAOE,qBAAKjB,OAAO,MAAMW,KAAM,CAAC,QAAS,EAAG,MACrC,8BAAcO,UAAW,KAEzB,kCACEtB,YAAU,EAEVsB,UAAW,GACXC,wBAAuB,IACvBC,uBAAsB,MA6CxB,cAAC,EAAD,IAEA,cAACC,EAAA,EAAD,YC5LKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d12bb1f2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useRef, useState } from \"react\";\n//R3F\nimport { Canvas, useFrame } from \"@react-three/fiber\";\n// Deai - R3F\nimport { softShadows, MeshWobbleMaterial, OrbitControls, Box, Plane, Sky, ContactShadows } from \"@react-three/drei\";\n\nimport { useSpring, a } from \"react-spring/three\";\n\n// soft Shadows\nsoftShadows();\n\nconst Scene = () => {\n  const boxRef = useRef();\n  useFrame(() => {\n    boxRef.current.rotation.y += 0.004;\n    boxRef.current.rotation.x += 0.004;\n    boxRef.current.rotation.z += 0.004;\n  });\n  // Set receiveShadow on any mesh that should be in shadow,\n  // and castShadow on any mesh that should create a shadow.\n  return (\n    <group>\n      <Sky\n        // castShadow\n        // receiveShadow\n        distance={450000} // Camera distance (default=450000)\n        sunPosition={[0, 1, 0]} // Sun position normal (defaults to inclination and azimuth if not set)\n        inclination={0.5} // Sun elevation angle from 0 to 1 (default=0)\n        azimuth={0.25} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n        // {...props} // All three-stdlib/objects/Sky props are valid\n        rayleigh={2}\n        mieCoefficient={0}\n        mieDirectionalG={0}\n\n      />\n      <Box\n        castShadow\n        receiveShadow\n        ref={boxRef}\n        position={[0, 1, 0]}\n      >\n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"white\"\n        />\n      </Box>\n\n      <ContactShadows\n        opacity={1}\n        width={1}\n        height={1}\n        blur={1} // Amount of blur (default=1)\n        far={10} // Focal distance (default=10)\n        resolution={256} // Rendertarget resolution (default=256)\n      />\n\n      <Plane\n        receiveShadow\n        // castShadow\n        rotation={[-Math.PI / 2, 0, 0]}\n        position={[0, -2, 0]}\n        args={[1000, 1000]}\n      >\n        <meshStandardMaterial\n          receiveShadow\n          attach=\"material\"\n          // color=\"white\"\n        />\n      </Plane>\n\n      {/* <mesh\n        // rotation={[-Math.PI / 2, 0, 0]}\n        position={[0, -1, 0]}\n        receiveShadow\n      >\n        <planeBufferGeometry\n          attach='geometry'\n          args={[100, 100]}\n          receiveShadow\n        />\n        <shadowMaterial attach='material' opacity={0.3} />\n      </mesh> */}\n    </group>\n  );\n};\n\nconst SpinningMesh = ({ position, color, speed, args }) => {\n  //ref to target the mesh\n  const mesh = useRef();\n\n  //useFrame allows us to re-render/update rotation on each frame\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return (\n    <a.mesh\n      position={position}\n      ref={mesh}\n      onClick={() => setExpand(!expand)}\n      scale={props.scale}\n      castShadow\n    >\n      <boxBufferGeometry attach='geometry' args={args} />\n      <MeshWobbleMaterial\n        color={color}\n        speed={speed}\n        attach='material'\n        factor={0.6}\n      />\n    </a.mesh>\n\n    //Using Drei box if you want\n    // <Box {...props} ref={mesh} castShadow>\n    //   <MeshWobbleMaterial\n    //     {...props}\n    //     attach='material'\n    //     factor={0.6}\n    //     Speed={1}\n    //   />\n    // </Box>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header> */}\n\n      <div className=\"App-main\">\n        <Canvas\n          className=\"canvas\"\n          colorManagement\n          shadowMap\n          // camera={{ position: [-5, 2, 10], fov: 60 }}\n          camera={{ position: [-3, 2, 5], fov: 90 }}\n        >\n          <fog attach=\"fog\" args={[\"white\", 0, 40]} />\n          <ambientLight intensity={0.3} />\n\n          <directionalLight\n            castShadow\n            // position={[0, 10, 0]}\n            intensity={0.5}\n            shadow-mapSize-height={512}\n            shadow-mapSize-width={512}\n          // shadow-mapSize-width={1024}\n          // shadow-mapSize-height={1024}\n          // shadow-camera-far={50}\n          // shadow-camera-left={-10}\n          // shadow-camera-right={10}\n          // shadow-camera-top={10}\n          // shadow-camera-bottom={-10}\n          />\n\n          {/* <pointLight position={[-10, 0, -20]} intensity={0.5} />\n        <pointLight position={[0, -10, 0]} intensity={1.5} /> */}\n\n          {/* <group>\n\n          <SpinningMesh\n            position={[0, 1, 0]}\n            color='lightblue'\n            args={[3, 2, 1]}\n            speed={2}\n          />\n\n          <mesh\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[0, -1, 0]}\n            receiveShadow\n          >\n            <planeBufferGeometry\n              attach='geometry'\n              args={[100, 100]}\n              receiveShadow\n            />\n            <shadowMaterial attach='material' opacity={0.3} />\n          </mesh>\n\n          <Plane\n            receiveShadow\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[0, -1, 0]}\n            args={[1000, 1000]}\n          >\n            <meshStandardMaterial attach=\"material\" color=\"white\" />\n          </Plane>\n        </group> */}\n\n          <Scene />\n\n          <OrbitControls />\n        </Canvas>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}