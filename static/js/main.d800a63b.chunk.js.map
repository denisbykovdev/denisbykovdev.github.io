{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["softShadows","Scene","children","Sky","castShadow","distance","sunPosition","inclination","azimuth","rayleigh","mieCoefficient","mieDirectionalG","rotation","Math","PI","position","receiveShadow","attach","args","opacity","SpinningMesh","color","speed","mesh","useRef","useFrame","current","x","y","useState","expand","setExpand","props","useSpring","scale","ref","onClick","MeshWobbleMaterial","factor","App","className","src","logo","alt","colorManagement","shadowMap","camera","fov","shadows","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAAe,MAA0B,iC,gECWzCA,cAEA,IAAMC,EAAQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACf,OACE,kCACE,cAACC,EAAA,EAAD,CACEC,YAAU,EACVC,SAAU,IACVC,YAAa,CAAC,EAAG,EAAG,GACpBC,YAAa,GACbC,QAAS,IAETC,SAAU,EACVC,eAAgB,GAChBC,gBAAiB,KAGlBT,EAWD,uBACEU,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAC5BC,SAAU,CAAC,GAAI,EAAG,GAClBC,eAAa,EAHf,UAKE,qCACEC,OAAO,WACPC,KAAM,CAAC,IAAM,OAGf,gCAAgBD,OAAO,WAAWE,QAAS,YAM7CC,EAAe,SAAC,GAKf,IAJLL,EAII,EAJJA,SACAM,EAGI,EAHJA,MACAC,EAEI,EAFJA,MACAJ,EACI,EADJA,KAEMK,EAAOC,mBAEbC,aAAS,kBAAOF,EAAKG,QAAQd,SAASe,EAAIJ,EAAKG,QAAQd,SAASgB,GAAK,OAHjE,MAKwBC,oBAAS,GALjC,mBAKGC,EALH,KAKWC,EALX,KAOEC,EAAQC,oBAAU,CACtBC,MAAOJ,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,KAE3C,OACE,eAAC,IAAEP,KAAH,CACER,SAAUA,EACVoB,IAAKZ,EACLa,QAAS,kBAAML,GAAWD,IAC1BI,MAAOF,EAAME,MACb9B,YAAU,EALZ,UAOE,mCAAmBa,OAAO,WAAWC,KAAMA,IAC3C,cAACmB,EAAA,EAAD,CACEhB,MAAOA,EACPC,MAAOA,EACPL,OAAO,WACPqB,OAAQ,SAmFDC,MAnEf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,WAG3C,qBAAKH,UAAU,WAAf,SACE,eAAC,IAAD,CACEA,UAAU,SACVI,iBAAe,EACfC,WAAS,EAETC,OAAQ,CAAE/B,SAAU,EAAE,EAAG,EAAG,GAAIgC,IAAK,IACrCC,SAAO,EACP5C,YAAU,EAPZ,UASE,qBACEa,OAAO,MACPC,KAAM,CAAC,QAAS,EAAG,MAGrB,8BACE+B,UAAW,GACX7C,YAAU,IAGZ,kCACEA,YAAU,EACVW,SAAU,CAAC,EAAG,GAAI,GAClBkC,UAAW,GACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAGzB,4BACEzC,SAAU,EAAE,GAAI,GAAI,IACpBkC,UAAW,GACX7C,YAAU,IAEZ,4BACEW,SAAU,CAAC,GAAI,GAAI,GACnBkC,UAAW,IACX7C,YAAU,IAGZ,cAAC,EAAD,UACE,cAAC,EAAD,CACEW,SAAU,CAAC,EAAG,EAAG,GACjBM,MAAM,YACNH,KAAM,CAAC,EAAG,EAAG,GACbI,MAAO,MAIX,cAACmC,EAAA,EAAD,aCnJKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d800a63b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useRef, useState } from \"react\";\n//R3F\nimport { Canvas, useFrame } from \"react-three-fiber\";\n// Deai - R3F\nimport { softShadows, MeshWobbleMaterial, OrbitControls, Box, Plane, Sky, ContactShadows } from \"@react-three/drei\";\n\nimport { useSpring, a } from \"react-spring/three\";\n\n// soft Shadows\nsoftShadows();\n\nconst Scene = ({ children }) => {\n  return (\n    <group>\n      <Sky\n        castShadow\n        distance={400000} // Camera distance (default=450000)\n        sunPosition={[0, 1, 0]} // Sun position normal (defaults to inclination and azimuth if not set)\n        inclination={0.5} // Sun elevation angle from 0 to 1 (default=0)\n        azimuth={0.25} // Sun rotation around the Y axis from 0 to 1 (default=0.25)\n        // {...props} // All three-stdlib/objects/Sky props are valid\n        rayleigh={1}\n        mieCoefficient={0.5}\n        mieDirectionalG={0.1}\n\n      />\n      {children}\n\n      {/* <ContactShadows\n        opacity={1}\n        width={1}\n        height={1}\n        blur={1} // Amount of blur (default=1)\n        far={10} // Focal distance (default=10)\n        resolution={256} // Rendertarget resolution (default=256)\n      /> */}\n\n      <mesh\n        rotation={[-Math.PI / 2, 0, 0]}\n        position={[0, -5, 0]}\n        receiveShadow\n      >\n        <planeBufferGeometry\n          attach='geometry'\n          args={[1000, 1000]}\n          \n        />\n        <shadowMaterial attach='material' opacity={0.3} />\n      </mesh>\n    </group>\n  );\n};\n\nconst SpinningMesh = ({\n  position,\n  color,\n  speed,\n  args\n}) => {\n  const mesh = useRef();\n\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  const [expand, setExpand] = useState(false);\n\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return (\n    <a.mesh\n      position={position}\n      ref={mesh}\n      onClick={() => setExpand(!expand)}\n      scale={props.scale}\n      castShadow\n    >\n      <boxBufferGeometry attach='geometry' args={args} />\n      <MeshWobbleMaterial\n        color={color}\n        speed={speed}\n        attach='material'\n        factor={0.6}\n      />\n    </a.mesh>\n\n    //Using Drei box if you want\n    // <Box {...props} ref={mesh} castShadow>\n    //   <MeshWobbleMaterial\n    //     {...props}\n    //     attach='material'\n    //     factor={0.6}\n    //     Speed={1}\n    //   />\n    // </Box>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      <div className=\"App-main\">\n        <Canvas\n          className=\"canvas\"\n          colorManagement\n          shadowMap\n          // camera={{ position: [-5, 2, 10], fov: 60 }}\n          camera={{ position: [-5, 2, 5], fov: 50 }}\n          shadows\n          castShadow\n        >\n          <fog\n            attach=\"fog\"\n            args={[\"white\", 0, 40]}\n          />\n\n          <ambientLight\n            intensity={0.3}\n            castShadow\n          />\n\n          <directionalLight\n            castShadow\n            position={[0, 10, 0]}\n            intensity={0.5}\n            shadow-mapSize-width={1024}\n            shadow-mapSize-height={1024}\n            shadow-camera-far={50}\n            shadow-camera-left={-10}\n            shadow-camera-right={10}\n            shadow-camera-top={10}\n            shadow-camera-bottom={-10}\n          />\n\n          <pointLight\n            position={[-10, 0, -20]}\n            intensity={0.5}\n            castShadow\n          />\n          <pointLight\n            position={[0, -10, 0]}\n            intensity={1.5}\n            castShadow\n          />\n\n          <Scene>\n            <SpinningMesh\n              position={[0, 1, 0]}\n              color='lightblue'\n              args={[3, 2, 1]}\n              speed={2}\n            />\n          </Scene>\n\n          <OrbitControls />\n        </Canvas>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}